{"version":3,"sources":["components/Doctor.js","doctors.js","screens/HomeScreen.js","components/Calender.js","screens/AppointmentScreen.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Doctor","doctor","Card","className","Header","icon","doctorIcon","name","Body","Title","style","marginRight","org","Text","display","justifyContent","availibility","days","map","day","marginLeft","visitDurationInMin","to","Button","variant","doctors","timeslots","sun","startingTime","endingTime","wed","mon","thu","fri","HomeScreen","Row","Doctors","Col","md","lg","xl","sm","Calender","useState","selectedDate","setSelectedDate","message","setMessage","selectedfinal","String","slice","console","log","tue","sat","dateValues","i","length","push","timeStops","start","end","startTime","moment","endTime","isBefore","add","format","getTimeStops","giveMessage","setTimeout","inline","selected","onChange","date","minDate","Date","showMonthDropdown","showYearDropdown","filterDate","getDay","includes","wrapperClassName","width","as","textAlign","timeStop","onClick","time","toString","match","join","color","marginTop","AppointmentScreen","find","d","params","setName","phone","setPhone","reason","setReason","Form","onSubmit","alert","Group","controlId","Label","Control","row","value","placeholder","required","e","target","type","Navbar","bg","expand","collapseOnSelect","Brand","Toggle","aria-controls","Collapse","id","Nav","FormControl","App","Container","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68a53792.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital'\r\nimport { Icon, InlineIcon } from '@iconify/react'\r\nimport doctorIcon from '@iconify-icons/mdi/doctor'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Doctor = ({ doctor }) => {\r\n  return (\r\n    <Card className='my-3 p-3 rounded'>\r\n      <Card.Header>\r\n        <h1>\r\n          <Icon icon={doctorIcon} />\r\n          <strong>{doctor.name}</strong>\r\n        </h1>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Card.Title>\r\n          <LocalHospitalIcon style={{ marginRight: '10px' }} />\r\n          {doctor.org}\r\n        </Card.Title>\r\n        <Card.Text style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <div style={{ display: 'flex' }}>\r\n            Visiting Days:\r\n            {doctor.availibility.days.map((day) => (\r\n              <span style={{ marginRight: '5px', marginLeft: '5px' }}>\r\n                {day}\r\n              </span>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            Visiting Duration:{' '}\r\n            <span style={{ marginRight: '5px' }}>\r\n              {doctor.visitDurationInMin} minutes\r\n            </span>\r\n          </div>\r\n        </Card.Text>\r\n        <Link to={`/appointment/${doctor.name}`}>\r\n          <Button variant='primary'>Fix appointment</Button>\r\n        </Link>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Doctor\r\n","const doctors = [\r\n  {\r\n    name: 'Dr. John Doe',\r\n    org: 'Kings London Hospital',\r\n    availibility: {\r\n      days: ['Sunday', 'Wednessday'],\r\n      timeslots: {\r\n        sun: { startingTime: '10:00', endingTime: '18:00' },\r\n        wed: { startingTime: '18:00', endingTime: '21:00' }\r\n      }\r\n    },\r\n    visitDurationInMin: 15,\r\n  },\r\n  {\r\n    name: 'Dr. Mary Ellis',\r\n    org: 'ABC Hospital',\r\n    availibility: {\r\n      days: ['Sunday', 'Monday', 'Thursday'],\r\n      timeslots: {\r\n        sun: { startingTime: '10:00', endingTime: '18:00' },\r\n        mon: { startingTime: '21:00', endingTime: '23:00' },\r\n        thu: { startingTime: '11:00', endingTime: '14:00' },\r\n      },\r\n    },\r\n    visitDurationInMin: 15,\r\n  },\r\n\r\n  {\r\n    name: 'Dr. B Chowdhury',\r\n    org: 'Central Hospital',\r\n    availibility: {\r\n      days: ['Sunday', 'Monday', 'Thursday', 'Friday'],\r\n      timeslots: {\r\n        sun: { startingTime: '10:00', endingTime: '18:00' },\r\n        mon: { startingTime: '21:00', endingTime: '23:00' },\r\n        thu: { startingTime: '11:00', endingTime: '14:00' },\r\n        fri: { startingTime: '11:00', endingTime: '14:00' },\r\n      },\r\n    },\r\n    visitDurationInMin: 30,\r\n  },\r\n]\r\nexport default doctors\r\n","import React from 'react'\r\nimport { Col, Row } from 'react-bootstrap'\r\nimport Doctor from '../components/Doctor'\r\nimport Doctors from '../doctors'\r\nconst HomeScreen = () => {\r\n    return (\r\n        <>\r\n        <h1>All Available Doctors</h1>\r\n        <Row>\r\n            {Doctors.map((doctor)=>(\r\n                <Col key={doctor.name} md={12} lg={12} xl={12} sm={12}>\r\n                    <Doctor doctor={doctor}/>\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import { getDay } from 'date-fns'\r\nimport React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport moment from 'moment'\r\nimport './calendar.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Col, Row, Button, Card } from 'react-bootstrap'\r\n\r\nconst Calender = ({ days, doctor }) => {\r\n  const [selectedDate, setSelectedDate] = useState(null)\r\n  const [message, setMessage] = useState('')\r\n  const [slot, setSlot] = useState('')\r\n  const dayv = String(selectedDate)\r\n  const selectedfinal = dayv.slice(0, 3)\r\n  console.log(selectedfinal)\r\n\r\n  var startingTime\r\n  var endingTime\r\n\r\n  if (selectedfinal === 'Sun') {\r\n    startingTime = doctor.availibility.timeslots.sun.startingTime\r\n    endingTime = doctor.availibility.timeslots.sun.endingTime\r\n  } else if (selectedfinal === 'Mon') {\r\n    startingTime = doctor.availibility.timeslots.mon.startingTime\r\n    endingTime = doctor.availibility.timeslots.mon.endingTime\r\n  } else if (selectedfinal === 'Tue') {\r\n    startingTime = doctor.availibility.timeslots.tue.startingTime\r\n    endingTime = doctor.availibility.timeslots.tue.endingTime\r\n  } else if (selectedfinal === 'Wed') {\r\n    startingTime = doctor.availibility.timeslots.wed.startingTime\r\n    endingTime = doctor.availibility.timeslots.wed.endingTime\r\n  } else if (selectedfinal === 'Thu') {\r\n    startingTime = doctor.availibility.timeslots.thu.startingTime\r\n    endingTime = doctor.availibility.timeslots.thu.endingTime\r\n  } else if (selectedfinal === 'Fri') {\r\n    startingTime = doctor.availibility.timeslots.fri.startingTime\r\n    endingTime = doctor.availibility.timeslots.fri.endingTime\r\n  } else if (selectedfinal === 'Sat') {\r\n    startingTime = doctor.availibility.timeslots.sat.startingTime\r\n    endingTime = doctor.availibility.timeslots.sat.endingTime\r\n  }\r\n\r\n  console.log(startingTime)\r\n\r\n  //console.log(startingTime)\r\n  let dateValues = []\r\n  for (let i = 0; i < days.length; i++) {\r\n    if (days[i] === 'Sunday') {\r\n      dateValues.push(0)\r\n    } else if (days[i] === 'Monday') {\r\n      dateValues.push(1)\r\n    } else if (days[i] === 'Tuesday') {\r\n      dateValues.push(2)\r\n    } else if (days[i] === 'Wednessday') {\r\n      dateValues.push(3)\r\n    } else if (days[i] === 'Thursday') {\r\n      dateValues.push(4)\r\n    } else if (days[i] === 'Friday') {\r\n      dateValues.push(5)\r\n    } else if (days[i] === 'Saturday') {\r\n      dateValues.push(6)\r\n    }\r\n  }\r\n\r\n  const isWeekday = (date) => {\r\n    const day = getDay(date)\r\n\r\n    return dateValues.includes(day)\r\n  }\r\n\r\n  function getTimeStops(start, end) {\r\n    var startTime = moment(start, 'HH:mm')\r\n    var endTime = moment(end, 'HH:mm')\r\n\r\n    if (endTime.isBefore(startTime)) {\r\n      endTime.add(1, 'day')\r\n    }\r\n\r\n    var timeStops = []\r\n\r\n    while (startTime <= endTime) {\r\n      timeStops.push(new moment(startTime).format('HH:mm'))\r\n      startTime.add(doctor.visitDurationInMin, 'minutes')\r\n    }\r\n    return timeStops\r\n  }\r\n\r\n  var timeStops = getTimeStops(startingTime, endingTime)\r\n  console.log('timeStops ', timeStops)\r\n\r\n  function tConvert(time) {\r\n    // Check correct time format and split into components\r\n    time = time\r\n      .toString()\r\n      .match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time]\r\n\r\n    if (time.length > 1) {\r\n      // If time format correct\r\n      time = time.slice(1) // Remove full string match value\r\n      time[5] = +time[0] < 12 ? 'AM' : 'PM' // Set AM/PM\r\n      time[0] = +time[0] % 12 || 12 // Adjust hours\r\n    }\r\n    return time.join('') // return adjusted time or original string\r\n  }\r\n\r\n  const giveMessage = () => {\r\n    setMessage('Time Slot Selected! Please Give Information Below')\r\n    setTimeout(() => {\r\n      setMessage('')\r\n    }, 5000)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={6}>\r\n          <DatePicker\r\n            inline\r\n            selected={selectedDate}\r\n            onChange={(date) => setSelectedDate(date)}\r\n            minDate={new Date()}\r\n            showMonthDropdown\r\n            showYearDropdown\r\n            filterDate={isWeekday}\r\n            wrapperClassName='datepicker'\r\n          />\r\n        </Col>\r\n        <Col md={3}></Col>\r\n\r\n        <Col md={3}>\r\n          <Card style={{ width: '450px' }}>\r\n            <Card.Title as='div' style={{ textAlign: 'center' }}>\r\n              <h5>Availbale Time Slots</h5>\r\n            </Card.Title>\r\n            <div className='grid-container'>\r\n              {timeStops.map((timeStop) => (\r\n                <Button variant='outline-primary' onClick={giveMessage}>\r\n                  {tConvert(timeStop)}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n            <strong>\r\n              <h6\r\n                style={{ color: 'red', textAlign: 'center', marginTop: '10px' }}\r\n              >\r\n                {message}\r\n              </h6>\r\n            </strong>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Calender\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport doctors from '../doctors'\r\nimport { Row, Col, Button, Form } from 'react-bootstrap'\r\nimport Calender from '../components/Calender'\r\n\r\nconst AppointmentScreen = ({ match }) => {\r\n  const doctor = doctors.find((d) => d.name === match.params.name)\r\n\r\n  const days = doctor.availibility.days\r\n  const [name, setName] = useState('')\r\n  const [phone, setPhone] = useState('')\r\n  const [reason, setReason] = useState('')\r\n\r\n  const submitHandler=()=>{\r\n      alert('Your Appointment Has Been Scheduled! Please Come on Time')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h4 style={{ textAlign: 'center' }}>\r\n        {' '}\r\n        Fix an appointment with <strong>{doctor.name}</strong>\r\n      </h4>\r\n      <Link className='btn btn-dark my-3' to='/'>\r\n        Go Back\r\n      </Link>\r\n      <Row>\r\n        <Col md={6}>\r\n          <h5>Select A date</h5>\r\n          <Calender days={days} doctor={doctor} />\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: '50px' }}>\r\n        <Col md={6}>\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                row='3'\r\n                value={name}\r\n                placeholder='Enter Your Name'\r\n                required\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='phone'>\r\n              <Form.Label>Phone Number</Form.Label>\r\n              <Form.Control\r\n                row='3'\r\n                value={phone}\r\n                required\r\n                placeholder='Enter Your Phone Number'\r\n                onChange={(e) => setPhone(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='reason'>\r\n              <Form.Label>  Problems</Form.Label>\r\n              <Form.Control\r\n                as='textarea'\r\n                row='3'\r\n                value={reason}\r\n                required\r\n                placeholder='Enter Your Phone Problems'\r\n                onChange={(e) => setReason(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button type='submit' variant='primary'>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppointmentScreen\r\n","import { Button } from 'react-bootstrap'\r\nimport React from 'react'\r\nimport { Form, FormControl, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar  bg='dark' variant='dark' expand='lg' collapseOnSelect>\r\n      <Link to='/'>\r\n        <Navbar.Brand>Doctor Lagbe</Navbar.Brand>\r\n      </Link>\r\n\r\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n      <Navbar.Collapse id='basic-navbar-nav'>\r\n        <Nav className='mr-auto'>\r\n      \r\n        </Nav>\r\n        <Form inline>\r\n          <FormControl type='text' placeholder='Search' className='mr-sm-2' />\r\n          <Button variant='outline-success'>Search</Button>\r\n        </Form>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport HomeScreen from './screens/HomeScreen'\nimport AppointmentScreen from './screens/AppointmentScreen'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <main className='py-3'>\n          <Container>\n            <Route path='/' component={HomeScreen} exact />\n            <Route path='/appointment/:name' component={AppointmentScreen} />\n          </Container>\n        </main>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './bootstrap.min.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}